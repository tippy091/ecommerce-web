var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import * as React from 'react';
import clsx from 'clsx';
import { Chip, Autocomplete, TextField, } from '@mui/material';
import { styled } from '@mui/material/styles';
import { useInput, FieldTitle } from 'ra-core';
import { InputHelperText } from './InputHelperText';
export var TextArrayInput = function (_a) {
    var className = _a.className, disabled = _a.disabled, format = _a.format, helperText = _a.helperText, label = _a.label, margin = _a.margin, parse = _a.parse, readOnly = _a.readOnly, size = _a.size, source = _a.source, sx = _a.sx, validate = _a.validate, variant = _a.variant, props = __rest(_a, ["className", "disabled", "format", "helperText", "label", "margin", "parse", "readOnly", "size", "source", "sx", "validate", "variant"]);
    var _b = useInput(__assign({ disabled: disabled, format: format, parse: parse, readOnly: readOnly, source: source, validate: validate }, props)), field = _b.field, _c = _b.fieldState, error = _c.error, invalid = _c.invalid, id = _b.id, isRequired = _b.isRequired;
    var renderHelperText = helperText !== false || invalid;
    return (React.createElement(StyledAutocomplete, __assign({ multiple: true, freeSolo: true, autoSelect: true, options: [], id: id, className: clsx('ra-input', "ra-input-".concat(source), className), renderTags: function (value, getTagProps) {
            return value.map(function (option, index) {
                var _a = getTagProps({ index: index }), key = _a.key, tagProps = __rest(_a, ["key"]);
                return (React.createElement(Chip, __assign({ size: "small", label: option, key: key }, tagProps)));
            });
        }, renderInput: function (params) { return (React.createElement(TextField, __assign({}, params, { label: label !== '' && label !== false ? (React.createElement(FieldTitle, { label: label, source: source, resource: props.resource, isRequired: isRequired })) : null, helperText: renderHelperText ? (React.createElement(InputHelperText, { error: error === null || error === void 0 ? void 0 : error.message, helperText: helperText })) : null, error: invalid, variant: variant, margin: margin, size: size }))); }, sx: sx }, field, { value: field.value || emptyArray, onChange: function (e, newValue) { return field.onChange(newValue); } }, props, { disabled: disabled || readOnly })));
};
var emptyArray = [];
var PREFIX = 'RaTextArrayInput';
var StyledAutocomplete = styled((Autocomplete), {
    name: PREFIX,
    overridesResolver: function (props, styles) { return styles.root; },
})(function (_a) {
    var theme = _a.theme;
    return ({
        minWidth: theme.spacing(20),
    });
});
//# sourceMappingURL=TextArrayInput.js.map